name: Commit stage

on:
  push:
    branches:
      - main
  pull_request:
    branches: 
      - main

permissions:
  checks: write
  contents: read
  packages: write

jobs:
  build-and-test:
    name: CI / Build and Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # - name: Pre-build dev container
    #   uses: devcontainers/ci@v0.3
    #   with:
    #     imageName: ghcr.io/curlyfire/ctf-sandbox-devcontainer
    #     cacheFrom: ghcr.io/curlyfire/ctf-sandbox-devcontainer
    #     push: always

    - name: Build and run dev container task
      uses: devcontainers/ci@v0.3

      with:
        cacheFrom: ghcr.io/curlyfire/ctf-sandbox-devcontainer
        env: |
          GCP_PROJECT_ID=${{ secrets.GCP_PROJECT_ID }}
          GCP_SA_KEY=${{ secrets.GCP_SA_KEY }}
        runCmd: |
          set -euo pipefail

          # Feed the JSON secret directly to gcloud via stdin
          cat <<'EOF' | gcloud auth activate-service-account \
            --key-file=- \
            --project "${{ secrets.GCP_PROJECT_ID }}"
          ${{ secrets.GCP_SA_KEY }}
          EOF
          
          # Configure Docker auth non-interactively
          gcloud auth configure-docker "${{ secrets.GCP_REGION }}-docker.pkg.dev" --quiet

          # Call the commit pipeline script with args
          pwsh -NoProfile -NonInteractive -Command "@'
            $version = "${{ github.sha }}"
            $psArgs = @(
              "-Version", $version,
              "-AdminPassword", "${{ secrets.ADMIN_PASSWORD }}",
              "-IpInfoToken", "${{ secrets.IPINFO_TOKEN }}"
            )
            if ("${{ github.event_name }}" -eq "push") {
              $psArgs += "-PushImage"
            }
            & ./pipelines/stages/commit/invoke.ps1 @psArgs
          '@"

    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests
        path: '**/*.trx'
        reporter: dotnet-trx
