name: Deploy Full Environment

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Image SHA to deploy"
        required: true
        type: string
      environment:
        description: "Target environment name"
        required: true
        type: choice
        options:
          - uat
          - production
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy environment
        shell: bash
        run: |
          set -e

          VERSION="${{ inputs.version }}"
          REGION="${{ secrets.GCP_REGION }}"
          PROJECT="${{ secrets.GCP_PROJECT_ID }}"
          ENV="${{ inputs.environment }}"

          echo "‚úÖ Deploying .NET 9 MVC App"
          gcloud run deploy mvc-app-$ENV \
            --image=us-central1-docker.pkg.dev/$PROJECT/ctf-sandbox-repo/ctf-sandbox:$VERSION \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --network=default \
            --subnet=default \
            --vpc-egress=all-traffic

          echo "‚úÖ Deploying rqlite (initial)"
          gcloud run deploy rqlite-$ENV \
            --image=rqlite/rqlite \
            --port=4001 \
            --region=$REGION \
            --platform=managed \
            --ingress=internal \
            --min-instances=1 \
            --max-instances=1 \
            --allow-unauthenticated \
            --args="--http-addr=0.0.0.0:4001"

          echo "üì° Retrieving rqlite URL"
          PROJECT_NUMBER=$(gcloud projects describe $PROJECT --format='value(projectNumber)')
          RQLITE_URL="rqlite-$ENV-${PROJECT_NUMBER}.$REGION.run.app"

          echo "üîÅ Updating rqlite HTTP_ADV_ADDR=$RQLITE_URL"
          echo "Resolved advertised address: $RQLITE_URL:443"
          gcloud run services update rqlite-$ENV \
            --region=$REGION \
            --update-env-vars=HTTP_ADV_ADDR=$RQLITE_URL:443 \
            --args="--http-addr=0.0.0.0:4001"

          echo "‚úÖ Deploying mailpit-ui"
          gcloud run deploy mailpit-ui-$ENV \
            --image=axllent/mailpit:latest \
            --port=8025 \
            --region=$REGION \
            --platform=managed \
            --allow-unauthenticated \
            --ingress=all \
            --network=default \
            --subnet=default \
            --vpc-egress=all-traffic \
            --args="--database=https://$RQLITE_URL"

          CLUSTER_NAME="sandbox-cluster-$ENV"
          echo "üåê Getting GKE credentials"
          gcloud container clusters get-credentials $CLUSTER_NAME --region=$REGION

          echo "üì¶ Rendering and deploying mailpit-smtp to GKE"
          export ENV RQLITE_URL
          envsubst < mailpit-smtp.yaml.tpl > mailpit-smtp.yaml
          envsubst < mailpit-smtp-service.yaml.tpl > mailpit-smtp-service.yaml

          kubectl apply -f mailpit-smtp.yaml
          kubectl apply -f mailpit-smtp-service.yaml

          NEG_NAME="mailpit-smtp-neg-$ENV"
          BACKEND_NAME="mailpit-smtp-backend-$ENV"

          echo "üîå Checking NEG existence"
          if ! gcloud compute network-endpoint-groups describe $NEG_NAME --region="$REGION" >/dev/null 2>&1; then
            gcloud compute network-endpoint-groups create $NEG_NAME \
              --region="$REGION" \
              --network-endpoint-type=serverless \
              --cloud-run-service=mailpit-smtp-$ENV \
              --project="$PROJECT"
          fi

          echo "üîÅ Checking backend service"
          if ! gcloud compute backend-services describe $BACKEND_NAME --region="$REGION" >/dev/null 2>&1; then
            gcloud compute backend-services create $BACKEND_NAME \
              --region="$REGION" \
              --load-balancing-scheme=internal \
              --protocol=tcp
          fi

          echo "üîó Checking backend attachment"
          BACKEND_EXISTS=$(gcloud compute backend-services describe $BACKEND_NAME --region="$REGION" \
            --format="value(backends[].group)" | grep $NEG_NAME || true)

          if [ -z "$BACKEND_EXISTS" ]; then
            gcloud compute backend-services add-backend $BACKEND_NAME \
              --region="$REGION" \
              --network-endpoint-group=$NEG_NAME \
              --network-endpoint-group-region="$REGION"
          fi

          echo "‚úÖ Deployment complete"
