name: Release

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      version:
        required: true
        type: string

jobs:
  # This job resolves the URL of the MVC app based on the environment and project number
  # It outputs the URL to be used in the deploy job
  resolve-url:
    runs-on: ubuntu-latest
    outputs:
      mvc_url: ${{ steps.set-url.outputs.mvc_url }}

    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Extract and set MVC App URL
        id: set-url
        shell: pwsh
        run: |
          $projectNumber = & gcloud projects describe "${{ secrets.GCP_PROJECT_ID }}" --format='value(projectNumber)'
          $mvcUrl = "https://mvc-app-${{ github.event.inputs.environment }}-$projectNumber.${{ secrets.GCP_REGION }}.run.app"
          "mvc_url=$mvcUrl" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append


  deploy:
    needs: resolve-url
    runs-on: ubuntu-latest
    # Set the environment url from the output of the resolve-url job
    # This allows the environment to be linked to the deployment
    # It is the only way to set a dynamic environment URL in GitHub Actions
    environment:
      name: ${{ inputs.environment }}
      url: ${{ needs.resolve-url.outputs.mvc_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run release stage script in dev container
        uses: devcontainers/ci@v0.3

        with:
          cacheFrom: ghcr.io/curlyfire/ctf-sandbox-devcontainer
          runCmd: |
            set -euo pipefail

            # Feed the JSON secret directly to gcloud via stdin
            cat <<'EOF' | gcloud auth activate-service-account \
              --key-file=- \
              --project "${{ secrets.GCP_PROJECT_ID }}"
            ${{ secrets.GCP_SA_KEY }}
            EOF
            
            # Configure Docker auth non-interactively
            gcloud auth configure-docker "${{ secrets.GCP_REGION }}-docker.pkg.dev" --quiet

            VERSION="${{ github.sha }}"
            ENV="${{ inputs.environment }}"
            ADMIN_PASSWORD="${{ secrets.ADMIN_PASSWORD }}"
            IPINFO_TOKEN="${{ secrets.IPINFO_TOKEN }}"

            psArgs_base=(
              "-Version" "$VERSION"
              "-Env" "$ENV"
              "-AdminPassword" "$ADMIN_PASSWORD"
              "-IpInfoToken" "$IPINFO_TOKEN"
            )
            
            pwsh -Command "./pipelines/stages/release/invoke.ps1 ${psArgs_base[@]}"
